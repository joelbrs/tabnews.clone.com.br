"""
Root query
"""
type Query {
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node

  """
  Fetches objects given their IDs
  """
  nodes(
    """
    The IDs of objects
    """
    ids: [ID!]!
  ): [Node]!

  GetUser(username: String): UserConnection!
  GetPosts(page: Int, limit: Int, slug: String): PostConnection!
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

type UserEdge {
  node: User!
}

type UserConnection {
  edges: [UserEdge]
}

type PostEdge {
  node: Post!
}

type PostConnection {
  edges: [PostEdge]
}

"""
User Type
"""
type User implements Node {
  """
  The ID of an object
  """
  id: ID!
  username: String!
  email: String
  description: String
  password: String!
  notify: Boolean!
  tabcoins: Int!
  posts: [Post!]
}

"""
Post Type
"""
type Post implements Node {
  """
  The ID of an object
  """
  id: ID!
  title: String!
  description: String!
  createdAt: String
  updatedAt: String
  creatorId: String!
  tabcoins: Boolean!
  slug: Int!
  user: User!
}

"""
Root mutation
"""
type Mutation {
  CreateUser(input: CreateUserInput!): UserPayload!
  UpdateUser(input: UpdateUserInput!): UserPayload!
  LoginUser(input: LoginUserInput!): LoginUserPayload!

  CreatePost(input: CreatePostInput): PostPayload!
  DeletePost(slug: String!): DeletePostPayload!
}

input CreateUserInput {
  username: String!
  email: String
  password: String!
}

type UserPayload {
  user: User!
}

input UpdateUserInput {
  username: String
  description: String
  email: String
  notify: Boolean
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserPayload {
  userId: String!
  token: String!
}

input CreatePostInput {
  title: String!
  description: String!
  font: String
}

type PostPayload {
  post: Post!
}

type DeletePostPayload {
  success: Boolean!
}
